#include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions

const op::update_price = "op::update_price"c; ;; this results in 0x7e8764ef opcode in this case


slice parse_sender_address (cell in_msg_full) inline {
    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    return sender_address;
}

(slice, int) load_data () inline {
    var ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_int(32));
}

() save_data (slice owner_address, int memorized_price) impure inline {
    set_data(begin_cell().store_slice(owner_address).store_uint(memorized_price, 32).end_cell());
}

;; recv_internal is the main function of the contract and is called when it receives a message
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;;

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables
    ;; in this case, it could also be done in the single op::increase handler, but generally you would want
    ;; to populate storage variables as soon as all preliminary checks which do not need storage pass

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it
    var sender_address = parse_sender_address(in_msg_full);

    if (op == 1) { ;; handle op::update_price

        (slice owner_address, int memorized_price) = load_data();
        throw_if(1001, ~ equal_slices(owner_address, sender_address));
        int new_price = in_msg_body~load_int(32);
        save_data(owner_address, new_price);

        return (); ;; this message is handled so we return
    }

    else {
        if (op == 2) { ;; op::read_price
            (slice owner_address, int memorized_price) = load_data();
            var msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(sender_address)
                .store_grams(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(3, 32)
                .store_uint(query_id, 64)
                .store_uint(memorized_price, 32)
                .end_cell();
            send_raw_message(msg, 64);
        } else {
            throw(3); 
        }
    }
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts
(int) get_price() method_id {
    (slice owner_address, int memorized_price) = load_data();
    return memorized_price; ;; then return the value
}

;; same deal as the previous get method, but this one returns the id of the counter
(slice) get_owner() method_id {
    (slice owner_address, int memorized_price) = load_data();
    return owner_address;
}
